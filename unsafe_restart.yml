---
# Copyright 2016 PingCAP, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# See the License for the specific language governing permissions and
# limitations under the License.

# The playbook of TiDB

- name: check config locally
  hosts: localhost
  any_errors_fatal: true
  tags:
    - always
  roles:
    - check_config_static

- name: gather all facts, and check dest
  hosts: all
  any_errors_fatal: true
  tags:
    - always
  roles:
    - check_config_dynamic

- hosts: monitored_servers
  tags:
    - node_exporter
  tasks:
    - name: restart node_exporter
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      when: not use_systemd
      with_items:
        - node_exporter

    - name: restart node_exporter by systemd
      systemd: name=node_exporter.service state=restarted
      become: true
      when: use_systemd and ansible_user != "root"

    - name: restart node_exporter by systemd
      systemd: name=node_exporter.service state=restarted
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait up
      wait_for: |
        host={{ ansible_host }} port={{ node_exporter_port }} state=present
        send='GET /metrics HTTP/1.0\r\n\r\n' search_regex='200 OK'

- hosts: monitoring_servers
  tags:
    - pushgateway
    - prometheus
  tasks:
    - name: restart monitoring modules
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      when: not use_systemd
      with_items:
        - pushgateway
        - prometheus

    - name: restart monitoring modules by systemd
      systemd: name={{ item }} state=restarted
      become: true
      when: use_systemd and ansible_user != "root"
      with_items:
        - pushgateway.service
        - prometheus.service

    - name: restart monitoring modules by systemd
      systemd: name={{ item }} state=restarted
      when: use_systemd and ansible_user == "root"
      with_items:
        - pushgateway.service
        - prometheus.service
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait pushgateway up
      wait_for: |
        host={{ ansible_host }} port={{ pushgateway_port }} state=present
        send='GET /metrics HTTP/1.0\r\n\r\n' search_regex='200 OK'

    - name: wait prometheus up
      wait_for: |
        host={{ ansible_host }} port={{ prometheus_port }} state=present
        send='GET /metrics HTTP/1.0\r\n\r\n' search_regex='200 OK'

- hosts: pd_servers
  tags:
    - pd
  tasks:
    - name: restart PD
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      when: not use_systemd
      with_items:
        - pd

    - name: restart PD by systemd
      systemd: name=pd.service state=restarted
      become: true
      when: use_systemd and ansible_user != "root"

    - name: restart PD by systemd
      systemd: name=pd.service state=restarted
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait up
      wait_for: |
        host={{ ansible_host }} port={{ pd_client_port }} state=present
        send='GET /pd/api/v1/members HTTP/1.0\r\n\r\n' search_regex='200 OK'

- hosts: tikv_servers
  tags:
    - tikv
  tasks:
    - name: restart TiKV
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      when: not use_systemd
      with_items:
        - tikv

    - name: restart TiKV by systemd
      systemd: name=tikv@{{ tikv_port }}.service state=restarted
      become: true
      when: use_systemd and ansible_user != "root"

    - name: restart TiKV by systemd
      systemd: name=tikv@{{ tikv_port }}.service state=restarted
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait up
      wait_for_pid: |
        pid_file={{ deploy_dir }}/status/tikv.pid timeout=300
        thread_name_regex='endpoint' state=present

- hosts: tidb_servers
  tags:
    - tidb
  tasks:
    - name: pump
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      when: not use_systemd
      with_items:
        - pump
      when: enable_binlog

    - name: restart pump by systemd
      systemd: name=pump.service state=restarted
      become: true
      when: enable_binlog and use_systemd and ansible_user != "root"

    - name: restart pump by systemd
      systemd: name=pump.service state=restarted
      when: enable_binlog and use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait pump up
      wait_for: |
        host={{ ansible_host }} port={{ pump_port }} state=present
      when: enable_binlog

    - name: restart TiDB
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      when: not use_systemd
      with_items:
        - tidb

    - name: restart TiDB by systemd
      systemd: name=tidb@{{ tidb_port }}.service state=restarted
      become: true
      when: use_systemd and ansible_user != "root"

    - name: restart TiDB by systemd
      systemd: name=tidb@{{ tidb_port }}.service state=restarted
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait up
      wait_for: |
        host={{ ansible_host }} port={{ tidb_port }} state=present
        search_regex='TiDB'


- hosts: grafana_servers
  tags:
    - grafana
  roles:
    - { role: grafana, grafana_exec_vars_only: true }
  tasks:
    - name: restart grafana
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      when: not use_systemd
      with_items:
        - grafana

    - name: restart grafana by systemd
      systemd: name=grafana.service state=restarted
      become: true
      when: use_systemd and ansible_user != "root"

    - name: restart grafana by systemd
      systemd: name=grafana.service state=restarted
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait grafana up
      wait_for: |
        host={{ ansible_host }} port={{ grafana_port }} state=present
        send='GET /login HTTP/1.0\r\n\r\n' search_regex='200 OK'

    - name: import grafana data source
      shell: >
        chdir={{ grafana_data_dir }}
        warn=no
        curl -q -X POST -d @data_source.json --header 'Content-Type: application/json'
        "http://{{ grafana_admin_user }}:{{ grafana_admin_password }}@127.0.0.1:{{ grafana_port }}/api/datasources"

    - name: import grafana dashboards - prepare config
      delegate_to: localhost
      template: src=grafana.dest.json.j2 dest={{ playbook_dir }}/scripts/dests.json
      vars:
        - ansible_become: false
        - ansible_connection: local
        - grafana_dest_config:
            name: "{{ cluster_name | title }}"
            url: "http://{{ inventory_hostname }}:{{ grafana_port }}/"
            user: "{{ grafana_admin_user }}"
            password: "{{ grafana_admin_password }}"
            datasource: "{{ cluster_name }}"
            titles:
              node: "{{ cluster_name | title }}-Node-Export"
              pd:   "{{ cluster_name | title }}-PD"
              tidb: "{{ cluster_name | title }}-TiDB"
              tikv: "{{ cluster_name | title }}-TiKV"
              overview: "{{ cluster_name | title }}-Overview"
              disk_performance: "{{ cluster_name | title }}-Disk Performance"

    - name: import grafana dashboards - run import script
      delegate_to: localhost
      shell: >-
        chdir={{ playbook_dir }}/scripts
        ./grafana-config-copy.py
      vars:
        - ansible_become: false
        - ansible_connection: local
