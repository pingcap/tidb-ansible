#!/bin/bash
ulimit -n 40960

# WARNING: This file was auto-generated. Do not edit!
#          All your edit might be overwritten!
cd "{{ deploy_dir }}" || exit 1

{% set status_dir = pd_status_dir -%}

{% set my_ip = ansible_default_ipv4.address -%}
{# my id in pd cluster #}
{% set my_peer_id = groups.pd_servers.index(inventory_hostname) + 1 -%}

{% set all_pd = [] -%}
{% for host in groups.pd_servers -%}
  {% set other_ip = hostvars[host]['ansible_default_ipv4']['address'] -%}
  {% set other_port = hostvars[host]['pd_peer_port'] -%}
  {% set other_pd_name_surfix = groups.pd_servers.index(host) + 1 -%}
  {% set other_pd_name = pd_name_prefix ~ other_pd_name_surfix -%}
  {% set _ = all_pd.append("%s=http://%s:%s" % (other_pd_name, other_ip, other_port)) -%}
{% endfor -%}

# running as root?
if [ "$(id -u)" -eq 0 ]; then
    echo "warning: run as root is dangerous! try switch to user: {{ deploy_user }}!"
    echo "error: did nothing!"
    exit 1
fi

# try up
bin/svc -u "{{ status_dir }}" &>/dev/null || true

# check by svstat
_check=$(bin/svstat "{{ status_dir }}" 2>/dev/null)
if echo "${_check}" | grep 'up pid' &>/dev/null; then
    _pid=$(echo "${_check}" | cut -d' ' -f 4)
    if [ "$(readlink /proc/${_pid}/cwd)" == "{{ deploy_dir }}" ]; then
        echo "ok: already started!"
        exit 0
    else
        echo "warning: status dir is not clean"
    fi
fi

# check by pid
if [ -e "{{ status_dir }}/pid" ]; then
    _pid=$(cat "{{ status_dir }}/pid")
    if ps aux | grep supervise | grep -v grep | grep "${_pid}" &>/dev/null; then
        echo "error: supervise of pid ${_pid} is alive! but process is down!"
        exit 1
    fi
    # rm -f "{{ status_dir }}/pid"
fi

nohup bin/supervise "{{ status_dir }}" \
    bin/pd-server \
    --name="{{ pd_name_prefix }}{{ my_peer_id }}" \
    --client-urls="http://{{ my_ip }}:{{ pd_client_port }}" \
    --advertise-client-urls="http://{{ my_ip }}:{{ pd_client_port }}" \
    --peer-urls="http://{{ my_ip }}:{{ pd_peer_port }}" \
    --advertise-peer-urls="http://{{ my_ip }}:{{ pd_peer_port }}" \
    --data-dir="{{ pd_data_dir }}" \
    --initial-cluster="{{ all_pd | join(',') }}" \
    --config=conf/pd.toml \
    -L "{{ pd_log_level }}" \
    --log-file="{{ pd_log_dir }}/{{ pd_log_filename }}" &>/dev/null &

echo $! > "{{ status_dir }}/pid"
echo "ok: started!"
