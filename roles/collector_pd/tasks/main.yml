---

- set_fact:
    tidb_insight_dir: "{{ hostvars[groups.monitored_servers[0]].deploy_dir }}"
    service_host: "{{ ansible_host }}"

- name: create pd fetch directory
  delegate_to: localhost
  file: path={{ item }} state=directory mode=0755
  with_items:
    - "{{ fetch_tmp_dir }}/{{ service_host }}"

- name: check pd log directory
  stat: path={{ pd_log_dir }} get_md5=false get_checksum=false
  register: log_dir_st

- fail:
    msg: "{{ pd_log_dir }} must exist and is a directory"
  when: log_dir_st.stat.isdir is not defined or log_dir_st.stat.isdir == False

- name: collect pd log
  shell: "python {{ tidb_insight_dir }}/scripts/collect-log.py --log-dir={{ pd_log_dir }} --prefix=pd --retention={{ collect_log_recent_hours | default('2') }} --output={{ pd_log_dir }} --alias={{ inventory_hostname }}"

- name: fetch pd log tarball with bandwidth limit
  delegate_to: localhost
  shell: "scp -l {{ collect_bandwidth_limit|default('10000') }} {{ service_host }}:{{ pd_log_dir }}/pd_{{ inventory_hostname }}.tar.gz {{ fetch_tmp_dir }}/{{ service_host }}/"
  when: enable_bandwidth_limit|default(true)

- name: fetch pd log tarball without bandwidth limit
  fetch:
    src: "{{ pd_log_dir }}/pd_{{ inventory_hostname }}.tar.gz"
    dest: "{{ fetch_tmp_dir }}/{{ service_host }}/"
    flat: yes
    validate_checksum: no
  when: not enable_bandwidth_limit|default(true)

- name: remove pd temporary log tarball
  file:
    path: "{{ pd_log_dir }}/{{ item }}"
    state: absent
  with_items:
    - "pd_{{ inventory_hostname }}.tar.gz"
