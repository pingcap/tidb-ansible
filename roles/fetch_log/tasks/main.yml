---

- set_fact:
    log_dir: "{{ pd_log_dir }}"
  when: "'pd_servers' in group_names"

- set_fact:
    log_dir: "{{ tikv_log_dir }}"
  when: "'tikv_servers' in group_names"

- set_fact:
    log_dir: "{{ tidb_log_dir }}"
  when: "'tidb_servers' in group_names"

- name: environment check (log directory)
  stat: path={{ log_dir }} get_md5=false get_checksum=false
  register: log_dir_st

- fail:
    msg: "{{ log_dir }} must exist and is a directory."
  when: log_dir_st.stat.isdir is not defined or log_dir_st.stat.isdir == False

- name: Guess deploy_user - set ansible_user as default
  set_fact:
    deploy_user: "{{ ansible_user }}"
  when: deploy_user is not defined

- name: Guess deploy_user - use become_user under root
  set_fact:
    deploy_user: "{{ ansible_become_user }}"
  when: deploy_user == 'root' and ansible_become_user is defined and ansible_become_user

- name: create system directory
  file: path={{ item }} state=directory mode=0755
  with_items:
    - "{{ log_dir }}/system"

- set_fact:
    system_dir: "{{ log_dir }}/system"

- name: collect os release
  shell: "cd {{ system_dir }} && ([ -f /etc/os-release ] && cp /etc/os-release .) || true"

- name: collect uname output
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 uname -a > uname"

- name: collect ulimit output
  shell: "cd {{ system_dir }} && su {{ deploy_user }} -c 'ulimit -a' > ulimit"

- name: collect sysctl.conf
  shell: "cd {{ system_dir }} && [ -f /etc/sysctl.conf ] && cp /etc/sysctl.conf ."

- name: collect sysctl output
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 sysctl -a > sysctl"

- name: collect dmesg output
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 dmesg > dmesg"

- name: collect message
  shell: "cd {{ system_dir }} && ([ -f /var/log/messages ] && cp /var/log/messages .) || true"

- name: collect ubuntu syslog
  shell: "cd {{ system_dir }} && ([ -f /var/log/syslog ] && cp /var/log/syslog .) || true"

- name: collect lscpu output
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 lscpu > lscpu"

- name: collect cpuinfo
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 cat /proc/cpuinfo > cpuinfo"

- name: collect free output
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 free -m > free_m"

- name: collect meminfo
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 cat /proc/meminfo > meminfo"

- name: collect df output
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 df -hT > df"

- name: collect mount output
  shell: "cd {{ system_dir }} && LANG=en_US.UTF-8 mount > mount"

- name: collect pd log
  shell: "cd {{ log_dir }}; tar czPf {{ inventory_hostname }}-pd.tar.gz pd.log pd_stderr.log system;"
  ignore_errors: yes
  when:
    - "'pd_servers' in group_names"

- name: collect tikv log
  shell: "cd {{ log_dir }}; tar czPf {{ inventory_hostname }}-tikv.tar.gz tikv.log tikv_stderr.log system;"
  ignore_errors: yes
  when:
    - "'tikv_servers' in group_names"

- name: collect tidb log
  shell: "cd {{ log_dir }}; tar czPf {{ inventory_hostname }}-tidb.tar.gz tidb.log tidb_stderr.log system;"
  ignore_errors: yes
  when:
    - "'tidb_servers' in group_names"

- name: fetch pd log file
  fetch:
    src: "{{ log_dir }}/{{ inventory_hostname }}-pd.tar.gz"
    dest: "{{ fetch_tmp_dir }}/{{ inventory_hostname }}/"
    flat: yes
    validate_checksum: no
  when: "'pd_servers' in group_names"

- name: fetch tikv log file
  fetch:
    src: "{{ log_dir }}/{{ inventory_hostname }}-tikv.tar.gz"
    dest: "{{ fetch_tmp_dir }}/{{ inventory_hostname }}/"
    flat: yes
    validate_checksum: no
  when: "'tikv_servers' in group_names"

- name: fetch tidb log file
  fetch:
    src: "{{ log_dir }}/{{ inventory_hostname }}-tidb.tar.gz"
    dest: "{{ fetch_tmp_dir }}/{{ inventory_hostname }}/"
    flat: yes
    validate_checksum: no
  when: "'tidb_servers' in group_names"

- name: remove pd log file
  file:
    path: "{{ log_dir }}/{{ item }}"
    state: absent
  with_items:
    - "{{ inventory_hostname }}-pd.tar.gz"
    - system
    - messages
  when: "'pd_servers' in group_names"

- name: remove tikv log file
  file:
    path: "{{ log_dir }}/{{ item }}"
    state: absent
  with_items:
    - "{{ inventory_hostname }}-tikv.tar.gz"
    - system
    - messages
  when: "'tikv_servers' in group_names"

- name: remove tidb log file
  file:
    path: "{{ log_dir }}/{{ item }}"
    state: absent
  with_items:
    - "{{ inventory_hostname }}-tidb.tar.gz"
    - system
    - messages
  when: "'tidb_servers' in group_names"
