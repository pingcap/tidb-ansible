---

- set_fact:
    tidb_check_dir: "/tmp/tidb_check_config"
    tikv_host: "{{ hostvars[groups.tikv_servers[0]].ansible_host | default(hostvars[groups.tikv_servers[0]].inventory_hostname) }}"

- name: Create temporary check directory
  file: name={{ tidb_check_dir }} state=directory

- set_fact:
    tikv_log_dir: "{{ deploy_dir }}/log"

- name: Load TiKV vars
  include_vars: file={{ playbook_dir }}/roles/tikv/defaults/main.yml name=tikv_vars_check

- name: "Load customized config: tidb-ansible/conf/tikv.yml"
  include_vars: file={{ playbook_dir }}/conf/tikv.yml name=tikv_conf_custom_check

- name: Load default config
  include_vars: file={{ playbook_dir }}/roles/tikv/vars/default.yml name=tikv_conf_default_check

- name: generate dynamic config
  set_fact:
    tikv_conf_generated_check:
      server:
        labels: "{{ tikv_vars_check.labels }}"
      rocksdb:
        wal-dir: "{{ tikv_vars_check.wal_dir }}"
      raftstore:
        raftdb-path: "{{ tikv_vars_check.raftdb_path }}"
      security:
        ca-path: >-
          {%- if enable_tls|default(false) -%}{{ tikv_cert_dir }}/ca.pem{%- else -%}{%- endif -%}
        cert-path: >-
          {%- if enable_tls|default(false) -%}{{ tikv_cert_dir }}/tikv-server-{{ tikv_host }}.pem{%- else -%}{%- endif -%}
        key-path: >-
          {%- if enable_tls|default(false) -%}{{ tikv_cert_dir }}/tikv-server-{{ tikv_host }}-key.pem{%- else -%}{%- endif -%}

- name: Generate final config
  set_fact:
    tikv_conf: "{{ tikv_conf_custom_check | with_default_dicts(tikv_conf_generated_check, tikv_conf_default_check) | update_default_dicts }}"

- name: Create configuration file
  template: src={{ playbook_dir }}/roles/tikv/templates/tikv.toml.j2 dest={{ tidb_check_dir }}/tikv.toml mode=0644 backup=yes

- name: Deploy TiKV binary
  copy: src="{{ resources_dir }}/bin/tikv-server" dest="{{ tidb_check_dir }}/" mode=0755 backup=yes

- name: Check TiKV config
  shell: cd {{ tidb_check_dir }} && ./tikv-server --pd-endpoints pd:port --config ./tikv.toml --config-check
  register: tikv_check_result

- name: Delete temporary check directory
  file: name={{ tidb_check_dir }} state=absent

- name: Check result
  fail:
    msg: "TiKV config error"
  when: "'successful' not in tikv_check_result.stdout"
