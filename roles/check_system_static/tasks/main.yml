---

- name: Disk space check - Fail task when disk is full
  raw: df -h . | tail -n1
  register: disk_space_st
  failed_when: " '100%' in disk_space_st.stdout "
  changed_when: false

- name: get facts
  setup:
    gather_subset: hardware
    gather_timeout: 30

- name: Preflight check - Linux OS family and distribution version
  fail:
    msg: "System versions lower than Red Hat Enterprise Linux / CentOS 7.3 have been deprecated. Please use CentOS 7.3 and above. See https://github.com/pingcap/docs/blob/master/dev/how-to/deploy/hardware-recommendations.md"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution in ['CentOS', 'RedHat']
    - ansible_distribution_major_version != '7'

- name: Deploy epollexclusive script
  copy: src="{{ script_dir }}/check/epollexclusive" dest="{{ deploy_dir }}/epollexclusive" mode=0755

- name: Preflight check - Check if the operating system supports EPOLLEXCLUSIVE
  shell: "{{ deploy_dir }}/epollexclusive"
  register: epollexclusive_check

- name: Clean epollexclusive script
  file: path={{ deploy_dir }}/epollexclusive state=absent

- name: Preflight check - Fail when epollexclusive is unavailable
  fail:
    msg: "The current machine may be a docker virtual machine, and the corresponding physical machine operating system does not support epollexclusive"
  when: epollexclusive_check.stdout.find("True") == -1

- name: Deploy check_cpufreq script
  copy: src="{{ script_dir }}/check/check_cpufreq.py" dest="{{ deploy_dir }}/check_cpufreq.py" mode=0755

- name: Preflight check - Check CPUfreq governors available in the kernel
  shell: "python {{ deploy_dir }}/check_cpufreq.py --available-governors"
  register: cpufreq_available_governors

- name: Preflight check - Check the currently active governor
  shell: "python {{ deploy_dir }}/check_cpufreq.py --current-governor"
  register: cpufreq_current_governor

- name: Preflight check - Fail when CPU frequency governor is not set to performance mode
  fail:
    msg: "To achieve maximum performance, it is recommended to set The CPU frequency governor to performance mode, see https://github.com/pingcap/docs/blob/master/dev/how-to/deploy/orchestrated/ansible.md#step-7-configure-the-cpufreq-governor-mode-on-the-target-machine"
  when:
    - cpufreq_available_governors.stdout.find("performance") != -1
    - cpufreq_current_governor.stdout.find("performance") == -1

- name: Clean check_cpufreq script
  file: path={{ deploy_dir }}/check_cpufreq.py state=absent

- name: Preflight check - Check Linux kernel overcommit_memory parameter
  shell: "sysctl -n vm.overcommit_memory"
  become: true
  register: vm_overcommit_memory

- name: Preflight check - Fail when Linux kernel vm.overcommit_memory parameter is set to 2
  fail:
    msg: "It is not recommended to set vm.overcommit_memory to 2, set it to 0 or 1."
  when: vm_overcommit_memory.stdout | int == 2

- name: Check ansible version
  fail:
    msg: "Stop if ansible version is too low, make sure that the Ansible version is 2.4.2 or later, otherwise a compatibility issue occurs. Current ansible version is {{ ansible_version.full }}"
  when: ansible_version.full | version_compare('2.4.2', '<')

- name: Get if jmespath info[1]
  shell: pip list | grep -iw jmespath | wc -l
  register: jmespath_exist

- name: Get if jinja2 exist[1]
  shell: pip list | grep -iw jinja2 | wc -l
  register: jinja2_exist

- name: Preflight check - Fail when jmespath or jinja2 doesn't exist
  fail:
    msg: "Jmespath or Jinja2 does not exist, Please run `pip install -r requirements.txt` to install."
  when: jmespath_exist.stdout | int == 0 or jinja2_exist.stdout | int == 0

- name: Get jmespath info[2]
  shell: pip show jmespath | grep Version |grep -v Metadata-Version
  register: jmespath

- name: Get jmespath version
  set_fact:
    jmespath_version: "{{ jmespath.stdout_lines[0] | replace('Version: ', '') }}"

- name: Get jinja2 info[2]
  shell: pip show jinja2 | grep Version |grep -v Metadata-Version
  register: jinja2

- name: Get jinja2 version
  set_fact:
    jinja2_version: "{{ jinja2.stdout_lines[0] | replace('Version: ', '') }}"

- name: Preflight check - Fail when the versions of jmespath and jinja2 doesn't meet the requirements
  fail:
    msg: "Jmespath({{ jmespath_version }}) or jinja2({{ jinja2_version }}) version is too low, Please run `pip install --upgrade -r requirements.txt` to upgrade."
  when: jmespath_version | version_compare('0.9.0', '<') or jinja2_version | version_compare('2.9.6', '<')
