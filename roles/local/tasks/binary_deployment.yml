---

- name: download other binary
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ third_party_packages }}"
  when:
    - has_outbound_network
    - not under_outbound

- name: download other binary under outbound
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ third_party_packages_under_outbound }}"
  when:
    - has_outbound_network
    - under_outbound

- name: download TiSpark packages
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ tispark_packages }}"
  when:
    - has_outbound_network
    - not deploy_without_tidb|default(false)

- name: download TiFlash packages
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ tiflash_packages }}"
  when:
    - has_outbound_network
    - cpu_architecture == 'amd64'

- name: unarchive third party binary
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ third_party_packages }}"

- name: unarchive tispark
  shell: tar xzf tispark-latest.tar.gz
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  when: not deploy_without_tidb|default(false)

- name: unarchive tispark-sample-data
  shell: ls -1 tispark-sample-data.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  when: not deploy_without_tidb|default(false)

- name: unarchive tiflash
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ tiflash_packages }}"
  when:
    - cpu_architecture == 'amd64'

- name: cp monitoring binary
  shell: >
    cp -v {{ downloads_dir }}/{{ item }}-*/{{ item }} "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - alertmanager
    - prometheus
    - node_exporter
    - pushgateway
    - blackbox_exporter

- name: cp tispark
  shell: >
    cp -v {{ downloads_dir }}/assembly/target/tispark-assembly-*-SNAPSHOT.jar "{{ resources_dir }}/bin/tispark-assembly-SNAPSHOT.jar"
  when: not deploy_without_tidb|default(false)

- name: cp tispark-sample-data
  shell: >
    cp -rfv {{ downloads_dir }}/tispark-sample-data "{{ resources_dir }}/bin/"
  when: not deploy_without_tidb|default(false)

- name: cp tiflash directory
  shell: >
    cp -rfv {{ downloads_dir }}/{{ item.name }}-{{ item.version }}-linux-amd64 "{{ resources_dir }}/bin/tiflash"
  with_items: "{{ tiflash_packages }}"
  when:
    - cpu_architecture == 'amd64'
