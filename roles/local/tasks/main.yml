---

- name: create downloads and resources directories
  file: path="{{ item }}" state=directory mode=0755
  with_items:
  - "{{ downloads_dir }}"
  - "{{ resources_dir }}"
  - "{{ resources_dir }}/bin"

- name: download TiDB binary 
  shell: >
    curl -L
    -o "{{ downloads_dir }}/{{ item.name }}.tar.gz"
    -z "{{ downloads_dir }}/{{ item.name }}.tar.gz"
    "{{ item.url }}"
  with_items:
    - { name: tidb-latest, url: "http://download.pingcap.org/tidb-latest-linux-amd64.tar.gz" }
    - { name: binlog-latest, url: "http://download.pingcap.org/binlog-latest-linux-amd64.tar.gz" }

- name: download other binary
  get_url: url={{ item.url }} dest={{ downloads_dir }}/{{ item.name }}.tar.gz
  with_items:
    - { name: alertmanager-0.5.1, url: "https://github.com/prometheus/alertmanager/releases/download/v0.5.1/alertmanager-0.5.1.linux-amd64.tar.gz" }
    - { name: prometheus-1.4.1, url:  "https://github.com/prometheus/prometheus/releases/download/v1.4.1/prometheus-1.4.1.linux-amd64.tar.gz" }
    - { name: node_exporter-0.13.0, url: "https://github.com/prometheus/node_exporter/releases/download/v0.13.0/node_exporter-0.13.0.linux-amd64.tar.gz" }
    - { name: pushgateway-0.3.1, url: "https://github.com/prometheus/pushgateway/releases/download/v0.3.1/pushgateway-0.3.1.linux-amd64.tar.gz" }
    - { name: grafana-4.0.2, url: "https://grafanarel.s3.amazonaws.com/builds/grafana-4.0.2-1481203731.linux-x64.tar.gz" }
    - { name: daemontools-0.53, url: "http://download.pingcap.org/daemontools-0.53.tar.gz" }

- name: download FlameGraph master
  get_url: >
    url=https://github.com/brendangregg/FlameGraph/archive/master.zip
    dest={{ resources_dir }}/FlameGraph.zip

- name: unarchive binary
  shell: ls -1 {{ item }}-*.tar.gz | xargs -n1 tar xzf 
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items:
    - tidb
    - binlog
    - alertmanager
    - prometheus
    - node_exporter
    - pushgateway
    - daemontools

- name: cp tidb binary
  shell: >
    cp -v "{{ downloads_dir }}/tidb-latest-linux-amd64/bin/{{ item }}" "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - tidb-server
    - pd-server
    - tikv-server

- name: cp binlog binary
  shell: >
    cp -v "{{ downloads_dir }}/binlog-latest-linux-amd64/bin/{{ item }}" "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - pump
    - cistern
    - drainer

- name: cp monitoring binary
  shell: >
    cp -v {{ downloads_dir }}/{{ item }}-*/{{ item }} "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - alertmanager
    - prometheus
    - node_exporter
    - pushgateway

- name: cp daemontools binary
  shell: >
    cp -v {{ downloads_dir }}/daemontools-*/bin/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - supervise
    - svstat
    - svc

# TODO
- name: compress each binary
  shell: >
    gzip -c "{{ downloads_dir }}/tidb-latest-linux-amd64/bin/{{ item }}" > "{{ resources_dir }}/bin/{{ item }}.gz"
  with_items:
    - tidb-server
    - pd-server
    - tikv-server


- name: clean up download dir
  shell: >
    cd "{{ downloads_dir }}" && ls -1 | grep -v tar.gz | xargs rm -rf ./{} \;
