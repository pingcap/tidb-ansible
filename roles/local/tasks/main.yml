---

- name: create downloads and resources directories
  file: path="{{ item }}" state=directory mode=0755
  with_items:
  - "{{ downloads_dir }}"
  - "{{ resources_dir }}"
  - "{{ resources_dir }}/bin"

- name: download tidb binary
  get_url: url={{ item.url }} dest={{ downloads_dir }}/{{ item.name }}.tar.gz force=yes
  with_items: "{{ tidb_urls }}"

- name: download binary
  get_url: url={{ item.url }} dest={{ downloads_dir }}/{{ item.name }}.tar.gz
  with_items: "{{ package_urls }}"

- name: download FlameGraph master
  get_url: >
    url=https://github.com/brendangregg/FlameGraph/archive/master.zip
    dest={{ resources_dir }}/FlameGraph.zip

- name: unarchive binary
  shell: ls -1 {{ item }}-*.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items:
    - tidb
    - binlog
    - alertmanager
    - prometheus
    - node_exporter
    - pushgateway
    - daemontools

- name: cp tidb binary
  shell: >
    cp -v "{{ downloads_dir }}/tidb-latest-linux-amd64/bin/{{ item }}" "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - tidb-server
    - pd-server
    - tikv-server

- name: cp binlog binary
  shell: >
    cp -v "{{ downloads_dir }}/binlog-latest-linux-amd64/bin/{{ item }}" "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - pump
    - cistern
    - drainer

- name: cp monitoring binary
  shell: >
    cp -v {{ downloads_dir }}/{{ item }}-*/{{ item }} "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - alertmanager
    - prometheus
    - node_exporter
    - pushgateway

- name: cp daemontools binary
  shell: >
    cp -v {{ downloads_dir }}/daemontools-*/bin/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - supervise
    - svstat
    - svc

- name: clean up download dir
  shell: >
    cd "{{ downloads_dir }}" && ls -1 | grep -v tar.gz | xargs rm -rf ./{} \;
