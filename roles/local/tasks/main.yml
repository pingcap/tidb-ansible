---

- name: create downloads and resources directories
  file: path="{{ item }}" state=directory mode=0755
  with_items:
  - "{{ downloads_dir }}"
  - "{{ resources_dir }}"
  - "{{ resources_dir }}/bin"

# preflight checks
- name: create packages.yml
  template: src=packages.yml.j2 dest={{ playbook_dir }}/conf/packages.yml

- include_vars: file={{ playbook_dir }}/conf/packages.yml

- name: detect outbound network
  shell: >
    warn=no
    curl -s --connect-timeout 10 baidu.com 2>/dev/null >/dev/null; echo $?
  changed_when: false
  register: outbound_network_st

- name: set outbound network fact
  set_fact: has_outbound_network={{ outbound_network_st.stdout.strip() == '0' }}

- name: detect GFW
  shell: >
    warn=no
    curl -s --connect-timeout 10 google.com 2>/dev/null >/dev/null; echo $?
  changed_when: false
  register: gfw_st

- name: set GFW fact
  set_fact: under_gfw={{ gfw_st.stdout.strip() != '0' }}

# do actual downloading

- name: download tidb binary
  get_url: url={{ item.url }} dest={{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz force=yes validate_certs=no
  with_items: "{{ tidb_packages }}"
  when: has_outbound_network

- name: get preGA tikv sha1
  uri:
    url: http://pingcap-dev.hk.ufileos.com/refs/pingcap/tikv/master/centos7/sha1
    return_content: yes
  register: tikv_sha1_st

- name: set tikv_sha1 facts
  set_fact:
    tikv_sha1: "{{ tikv_sha1_st.content | trim }}"

- name: download preGA tikv binary
  get_url: url=http://pingcap-dev.hk.ufileos.com/builds/pingcap/tikv/{{ tikv_sha1 }}/centos7/tikv-server.tar.gz dest={{ downloads_dir }}/tikv-server.tar.gz force=yes validate_certs=no
  when: has_outbound_network

- name: download other binary
  get_url: url={{ item.url }} dest={{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz validate_certs=no
  with_items: "{{ third_party_packages }}"
  when: has_outbound_network and not under_gfw

- name: download other binary under gfw
  get_url: |
    url=http://download.pingcap.org/{{ item.name }}-{{ item.version }}.tar.gz
    dest={{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz
    validate_certs=no
  with_items: "{{ third_party_packages }}"
  when: has_outbound_network and under_gfw

- name: unarchive tidb binary
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ tidb_packages }}"

- name: unarchive preGA tikv binary
  shell: ls -1 tikv-server.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no

- name: unarchive third party binary
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ third_party_packages }}"



- name: cp tidb binary
  shell: >
    cp -v {{ downloads_dir }}/{{ item.name }}-{{ item.version}}*/bin/* "{{ resources_dir }}/bin/"
  with_items: "{{ tidb_packages }}"

- name: cp preGA tikv binary
  shell: >
    cp -v {{ downloads_dir }}/bin/tikv* "{{ resources_dir }}/bin/"

- name: cp monitoring binary
  shell: >
    cp -v {{ downloads_dir }}/{{ item }}-*/{{ item }} "{{ resources_dir }}/bin/{{ item }}"
  with_items:
    - alertmanager
    - prometheus
    - node_exporter
    - pushgateway

- name: cp daemontools binary
  shell: >
    cp -v {{ downloads_dir }}/daemontools-*/bin/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - supervise
    - svstat
    - svc
- name: cp fio binary
  shell: >
    cp -v {{ downloads_dir }}/fio-*/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - fio

- name: clean up download dir
  shell: >
    cd "{{ downloads_dir }}" && ls -1 | grep -v tar.gz | xargs rm -rf ./{} \;
