---

- name: Stop if ansible version is too low, make sure that the Ansible version is Ansible 2.4.2 or later, otherwise a compatibility issue occurs.
  assert:
    that:
      - ansible_version.full|version_compare('2.4.2', '>=')
      # - ansible_version.full is version('2.5.0', '>=')

- name: create downloads and resources directories
  file: path="{{ item }}" state=directory mode=0755
  with_items:
  - "{{ downloads_dir }}"
  - "{{ resources_dir }}"
  - "{{ resources_dir }}/bin"

- name: create cert directory
  file: path="{{ cert_dir }}" state=directory mode=0755
  when: enable_tls|default(false)

- name: create packages.yml
  template: src=common_packages.yml.j2 dest={{ playbook_dir }}/conf/common_packages.yml

- name: create specific deployment method packages.yml
  template: src={{ deployment_method }}_packages.yml.j2 dest={{ playbook_dir }}/conf/{{ deployment_method }}_packages.yml

- include_vars: file={{ playbook_dir }}/conf/common_packages.yml

- include_vars: file={{ playbook_dir }}/conf/{{ deployment_method }}_packages.yml

# preflight checks
- name: detect outbound network[1]
  shell: >
    warn=no
    curl -s --connect-timeout 10 www.baidu.com 2>/dev/null >/dev/null; echo $?
  changed_when: false
  register: outbound_network_st

- name: set outbound network fact[1]
  set_fact: has_outbound_network={{ outbound_network_st.stdout.strip() == '0' }}

- fail:
    msg: "The Control Machine must have access to the Internet in order to download TiDB and related packages."
  when: not has_outbound_network

- name: detect outbound network[2]
  shell: >
    warn=no
    curl -s --connect-timeout 10 google.com 2>/dev/null >/dev/null; echo $?
  changed_when: false
  register: outbound_st

- name: set outbound network fact[2]
  set_fact: under_outbound={{ outbound_st.stdout.strip() != '0' }}

# do actual downloading
- name: download tidb binary
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ tidb_packages }}"
  when: has_outbound_network

- name: download tidb toolkit binary
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ tidb_toolkit_packages }}"
  when: has_outbound_network

- name: download common binary
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ common_packages }}"
  when: has_outbound_network

- name: download diagnosis tools
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ diagnosis_packages }}"
  when: has_outbound_network

- name: download cfssl binary
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
    dest: "{{ resources_dir }}/bin/cfssl"
    mode: 0755
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  when:
    - has_outbound_network
    - enable_tls|default(false)

- name: download cfssljson binary
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
    dest: "{{ resources_dir }}/bin/cfssljson"
    mode: 0755
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  when:
    - has_outbound_network
    - enable_tls|default(false)

- include_tasks: "{{ deployment_method }}_deployment.yml"

- name: unarchive tidb binary
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ tidb_packages }}"

- name: unarchive tidb toolkit binary
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ tidb_toolkit_packages }}"

- name: unarchive common binary
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ common_packages }}"

- name: cp tidb binary
  shell: >
    cp -v {{ downloads_dir }}/{{ item.name }}-{{ item.version}}*/bin/* "{{ resources_dir }}/bin/"
  with_items: "{{ tidb_packages }}"

- name: cp tidb toolkit binary
  shell: >
    cp -v {{ downloads_dir }}/{{ item.name }}-{{ item.version}}*/bin/* "{{ resources_dir }}/bin/"
  with_items: "{{ tidb_toolkit_packages }}"

- name: cp fio binary
  shell: >
    cp -v {{ downloads_dir }}/fio-*/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - fio

- name: cp kafka_exporter binary
  shell: >
    cp -v {{ downloads_dir }}/kafka_exporter-*/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - kafka_exporter

- name: cp daemontools binary
  shell: >
    cp -v {{ downloads_dir }}/daemontools-*/bin/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - supervise
    - svstat
    - svc
  when: process_supervision == 'supervise'

- name: cp tidb-insight tarball
  shell: mv {{ downloads_dir }}/tidb-insight-v*.tar.gz {{ downloads_dir }}/tidb-insight.tar.gz

- name: clean up download dir
  shell: >
    cd "{{ downloads_dir }}" && find . -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;
