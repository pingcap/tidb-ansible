---
# tasks file for tidb

- name: create deploy directories
  file: path="{{ item }}" state=directory mode=0755
  with_items:
  - "{{ tidb_log_dir }}"
  - "{{ tidb_conf_dir }}"

- include_tasks: check_certs.yml
  when: enable_tls|default(false)

- include_tasks: gen_certs.yml
  when: enable_tls|default(false)

- include_tasks: install_certs.yml
  when: enable_tls|default(false)

# config part
- name: "load customized config: tidb-ansible/conf/tidb.yml"
  include_vars: file={{ playbook_dir }}/conf/tidb.yml name=tidb_conf_custom

- name: load default config
  include_vars: file=default.yml name=tidb_conf_default

- name: generate dynamic config
  set_fact:
    tidb_conf_generated:
      security:
        cluster-ssl-ca: >-
          {%- if enable_tls|default(false) -%}{{ tidb_cert_dir }}/ca.pem{%- else -%}{%- endif -%}
        cluster-ssl-cert: >-
          {%- if enable_tls|default(false) -%}{{ tidb_cert_dir }}/tidb-server-{{ tidb_host }}.pem{%- else -%}{%- endif -%}
        cluster-ssl-key: >-
          {%- if enable_tls|default(false) -%}{{ tidb_cert_dir }}/tidb-server-{{ tidb_host }}-key.pem{%- else -%}{%- endif -%}     

- name: combine final config
  set_fact:
    tidb_conf: "{{ tidb_conf_generated | with_default_dicts(tidb_conf_custom, tidb_conf_default) | update_default_dicts }}"

- debug: var=tidb_conf

- name: create config file
  template: src=tidb.toml.j2 dest={{ deploy_dir }}/conf/tidb.toml mode=0644 backup=yes
  register: tidb_conf_st

- name: backup conf file
  command: mv "{{ tidb_conf_st.backup_file }}" "{{ backup_dir }}"
  when: tidb_conf_st.changed and tidb_conf_st.backup_file is defined

- include_tasks: "{{ deployment_method }}_deployment.yml"

- name: prepare firewalld white list
  set_fact:
    firewalld_ports: "{{ [tidb_port ~ '/tcp', tidb_status_port ~ '/tcp'] + firewalld_ports }}"
