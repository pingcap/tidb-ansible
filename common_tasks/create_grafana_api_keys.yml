---

- name: Ensure grafana API Key directory exists
  file:
    path: "{{ grafana_api_keys_dir }}"
    state: directory
  delegate_to: localhost

- name: Check grafana API Key list
  uri:
    url: "http://{{ grafana_host }}:{{ grafana_port }}/api/auth/keys"
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    return_content: yes
  register: existing_api_keys

- name: Check grafana API Key file existed
  stat:
    path: "{{ grafana_api_keys_dir }}/grafana_apikey.key"
  register:  grafana_apikey_file
  delegate_to: localhost

- set_fact:
    apikey_id: "{{ item }}"
  with_items: "{{ existing_api_keys.json|json_query(apikey_id_query) }}"
  vars:
    apikey_id_query: "[?name=='grafana_apikey'].id"
  when:
    - ((existing_api_keys['json'] | selectattr("name", "equalto", "grafana_apikey")) | list) | length == 1
    - grafana_apikey_file.stat.exists == False

- debug:
    var: apikey_id
  when:
    - ((existing_api_keys['json'] | selectattr("name", "equalto", "grafana_apikey")) | list) | length == 1
    - grafana_apikey_file.stat.exists == False

- name: Delete grafana API Key when grafana API Key file is missing
  uri:
    url: "http://{{ grafana_host }}:{{ grafana_port }}/api/auth/keys/{{ apikey_id }}"
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    method: DELETE
  when:
    - ((existing_api_keys['json'] | selectattr("name", "equalto", "grafana_apikey")) | list) | length == 1
    - grafana_apikey_file.stat.exists == False

- name: Create grafana API Key
  uri:
    url: "http://{{ grafana_host }}:{{ grafana_port }}/api/auth/keys"
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    method: POST
    body_format: json
    body: "{{ item | to_json }}"
  with_items: "{{ grafana_api_keys }}"
  when: (((existing_api_keys['json'] | selectattr("name", "equalto", item['name'])) | list) | length == 0) or (((existing_api_keys['json'] | selectattr("name", "equalto", "grafana_apikey")) | list) | length == 1 and grafana_apikey_file.stat.exists == False)
  register: new_api_keys

- name: Create grafana API key file
  become: no
  copy:
    dest: "{{ grafana_api_keys_dir }}/{{ item['item']['name'] }}.key"
    content: "{{ item['json']['key'] }}"
    backup: no
  when: item['json'] is defined
  with_items: "{{ new_api_keys['results'] }}"
  delegate_to: localhost
