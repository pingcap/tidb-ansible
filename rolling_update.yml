---
# Copyright 2016 PingCAP, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# See the License for the specific language governing permissions and
# limitations under the License.

# The rolling update playbook of TiDB

- name: check config locally
  hosts: localhost
  any_errors_fatal: true
  tags:
    - always
  roles:
    - check_config_static

- name: gather all facts, and check dest
  hosts: all
  any_errors_fatal: true
  tags:
    - always
  roles:
    - check_config_dynamic

- name: rolling update NodeExporter
  hosts: monitored_servers
  any_errors_fatal: true
  tags:
    - node_exporter
  roles:
    - { role: node_exporter, tags: ["deploy"] }
  post_tasks:
    - name: stop NodeExporter
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./stop_node_exporter.sh
      when: not use_systemd

    - name: stop NodeExporter by systemd
      tags:
        - restart
      systemd: name=node_exporter.service state=stopped
      become: true
      when: use_systemd and ansible_user != "root"

    - name: stop NodeExporter by systemd
      tags:
        - restart
      systemd: name=node_exporter.service state=stopped
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait NodeExporter down
      tags:
        - restart
      wait_for: host={{ ansible_host }} port={{ node_exporter_port }} state=stopped

    - name: start NodeExporter
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./start_node_exporter.sh
      when: not use_systemd

    - name: start NodeExporter by systemd
      tags:
        - restart
      systemd: name=node_exporter.service state=restarted
      become: true
      when: use_systemd and ansible_user != "root"

    - name: start NodeExporter by systemd
      tags:
        - restart
      systemd: name=node_exporter.service state=restarted
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait NodeExporter up
      wait_for: |
        host={{ ansible_host }} port={{ node_exporter_port }} state=present
        send='GET /metrics HTTP/1.0\r\n\r\n' search_regex='200 OK'


- name: rolling update PD cluster
  hosts: pd_servers
  any_errors_fatal: true
  serial: 1
  tags:
    - pd
  roles:
    - { role: pd, tags: ["deploy"] }
  post_tasks:
    - name: stop PD
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./stop_pd.sh
      when: not use_systemd

    - name: stop PD by systemd
      tags:
        - restart
      systemd: name=pd.service state=stopped
      become: true
      when: use_systemd and ansible_user != "root"

    - name: stop PD by systemd
      tags:
        - restart
      systemd: name=pd.service state=stopped
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait PD down
      tags:
        - restart
      wait_for: host={{ ansible_host }} port={{ pd_client_port }} state=stopped

    - name: start PD
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./start_pd.sh
      when: not use_systemd

    - name: start PD by systemd
      tags:
        - restart
      systemd: name=pd.service state=started
      become: true
      when: use_systemd and ansible_user != "root"

    - name: start PD by systemd
      tags:
        - restart
      systemd: name=pd.service state=started
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait PD up
      wait_for: |
        host={{ ansible_host }} port={{ pd_client_port }} state=present
        send='GET /pd/api/v1/members HTTP/1.0\r\n\r\n' search_regex='200 OK'


- name: rolling update TiKV cluster
  hosts: tikv_servers
  any_errors_fatal: true
  serial: 1
  tags:
    - tikv
  roles:
    - { role: tikv, tags: ["deploy"] }
  post_tasks:
    - name: stop TiKV
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./stop_tikv.sh
      when: not use_systemd

    - name: stop TiKV by systemd
      tags:
        - restart
      systemd: name=tikv@{{ tikv_port }}.service state=stopped
      become: true
      when: use_systemd and ansible_user != "root"

    - name: stop TiKV by systemd
      tags:
        - restart
      systemd: name=tikv@{{ tikv_port }}.service state=stopped
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait TiKV down (via Port)
      tags:
        - restart
      wait_for: host={{ ansible_host }} port={{ tikv_port }} state=stopped

    - name: wait TiKV down (via PID)
      tags:
        - restart
      when: not use_systemd
      wait_for_pid: pid_file={{ deploy_dir }}/status/tikv.pid timeout=300 state=absent

    - name: start TiKV
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./start_tikv.sh
      when: not use_systemd

    - name: start TiKV by systemd
      tags:
        - restart
      systemd: name=tikv@{{ tikv_port }}.service state=started
      become: true
      when: use_systemd and ansible_user != "root"

    - name: start TiKV by systemd
      tags:
        - restart
      systemd: name=tikv@{{ tikv_port }}.service state=started
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait TiKV up
      tags:
        - restart
      wait_for_pid: |
        pid_file={{ deploy_dir }}/status/tikv.pid timeout=300
        thread_name_regex='endpoint' state=present


- name: rolling update TiDB cluster
  hosts: tidb_servers
  any_errors_fatal: true
  serial: 1
  tags:
    - tidb
  roles:
    - { role: pump, when: enable_binlog, tags: ["deploy"] }
    - { role: tidb, tags: ["deploy"] }
  post_tasks:
    - name: stop TiDB
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./stop_tidb.sh
      when: not use_systemd

    - name: stop TiDB by systemd
      tags:
        - restart
      systemd: name=tidb.service state=stopped
      become: true
      when: use_systemd and ansible_user != "root"

    - name: stop TiDB by systemd
      tags:
        - restart
      systemd: name=tidb.service state=stopped
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait TiDB down
      tags:
        - restart
      wait_for: host={{ ansible_host }} port={{ tidb_port }} state=stopped

    - name: stop pump
      shell: cd {{ deploy_dir }}/scripts && (./stop_{{ item }}.sh; ./start_{{ item }}.sh)
      with_items:
        - pump
      when: enable_binlog and not use_systemd

    - name: stop pump by systemd
      systemd: name=pump.service state=stopped
      become: true
      when: enable_binlog and use_systemd and ansible_user != "root"

    - name: stop pump by systemd
      systemd: name=pump.service state=stopped
      when: enable_binlog and use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait pump up
      wait_for: |
        host={{ ansible_host }} port={{ pump_port }} state=present
      when: enable_binlog

    - name: start TiDB
      tags:
        - restart
      shell: cd {{ deploy_dir }}/scripts && ./start_tidb.sh
      when: not use_systemd

    - name: start TiDB by systemd
      tags:
        - restart
      systemd: name=tidb.service state=started
      become: true
      when: use_systemd and ansible_user != "root"

    - name: start TiDB by systemd
      tags:
        - restart
      systemd: name=tidb.service state=started
      when: use_systemd and ansible_user == "root"
      vars:
        - ansible_become: false
        - ansible_become_user: root

    - name: wait TiDB up
      tags:
        - restart
      wait_for: |
        host={{ ansible_host }} port={{ tidb_port }} state=present
        search_regex='TiDB'
